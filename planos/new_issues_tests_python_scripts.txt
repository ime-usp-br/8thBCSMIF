TITLE: [TEST][DevTools] Testar Funcionalidade Principal em run_tests.py
TYPE: test
LABELS: test,devtools,python,pytest,test-runner
ASSIGNEE: @me
PROJECT: Laravel 12 Starter Kit
MILESTONE:
PARENT_ISSUE:
TEST_MOTIVATION: Garantir que o script `run_tests.py` execute corretamente as suítes de teste PHPUnit e Dusk, interprete as flags de linha de comando (`--skip-*`, `--stop-on-failure`) e realize a limpeza adequada dos processos em background.
TEST_SCOPE: Testes unitários para funções auxiliares (se houver) e testes de integração para o fluxo principal do script. Verificar a execução (simulada ou real com flag) dos comandos `php artisan test` e `php artisan dusk`, o início e parada dos serviços auxiliares (ChromeDriver, servidor Artisan, servidor Vite Dev - simulados ou reais com flag) e o comportamento das flags. Validar a criação dos arquivos de log.
TEST_APPROACH: Utilizar `pytest`. Implementar a flag `--live` para alternar entre mock e execução real de `php artisan test`, `php artisan serve`, `npm run dev` e `chromedriver`. O modo mock será o padrão (para CI), simulando códigos de saída e verificando se os comandos corretos seriam chamados. O modo live (`pytest --live`) executará os comandos reais (requer ambiente Laravel funcional, `gh` autenticado, chave Gemini API no `.env` para scripts dependentes). Usar fixtures `pytest` para setup/teardown (ex: criar arquivos de log falsos, limpar processos).
ACCEPTANCE_CRITERIA:
- [ ] Configuração do `pytest` completa (dependências, fixtures básicas).
- [ ] Testes unitários para funções auxiliares, se aplicável.
- [ ] Testes de integração cobrem o fluxo principal do script.
- [ ] **OBRIGATÓRIO:** Testes podem ser executados em modo 'mock' (padrão, para CI) e modo 'live' (com flag `--live`) para os comandos externos (`php artisan test`, `php artisan serve`, `npm run dev`, `chromedriver`).
- [ ] Teste verifica a execução padrão (ambas as suítes).
- [ ] Teste verifica o funcionamento da flag `--skip-phpunit`.
- [ ] Teste verifica o funcionamento da flag `--skip-dusk`.
- [ ] Teste verifica o funcionamento da flag `--stop-on-failure` (para falha PHPUnit e falha Dusk).
- [ ] Teste verifica a criação dos arquivos de log (`chromedriver.log`, `dusk_serve.log`, `vite_dev.log`) no modo 'live' (ou verifica a tentativa de criação no modo 'mock').
- [ ] Teste verifica a lógica de inicialização e parada dos processos em background (ChromeDriver, Artisan Serve, Vite) no modo 'live' (ou simula no modo 'mock').
- [ ] Teste verifica o tratamento de erro se comandos essenciais (`php`, `npm`) não existirem (modo mock).
- [ ] CI: Workflow `.github/workflows/laravel.yml` atualizado para executar `python -m pytest tests/python/` (modo mock).
- [ ] Qualidade: Código dos testes formatado (Pint/Black) e passando em análise estática (PHPStan/Mypy, se configurado para Python).
------
TITLE: [TEST][DevTools] Testar Parsing de Arquivo e Lógica de Atualização em update_project.py
TYPE: test
LABELS: test,devtools,python,pytest,project-update
ASSIGNEE: @me
PROJECT: Laravel 12 Starter Kit
MILESTONE:
PARENT_ISSUE:
TEST_MOTIVATION: Assegurar que o script `update_project.py` parseie corretamente o arquivo fonte demarcado (`source_code_string.txt` ou similar) e crie/sobrescreva os arquivos de destino nos locais corretos dentro do projeto, incluindo a criação de diretórios necessários e a prevenção contra escrita fora do diretório raiz.
TEST_SCOPE: Testes unitários para a lógica de parsing dos blocos `--- START/END ---` e testes de integração simulando a leitura de um arquivo fonte e a escrita em um sistema de arquivos temporário (`tmp_path` fixture do pytest). Validar a extração correta de caminhos e conteúdos, criação de diretórios, escrita de arquivos e tratamento de erros (arquivo fonte não encontrado, caminho inválido, erro de escrita).
TEST_APPROACH: Utilizar `pytest`. Usar a fixture `tmp_path` para criar um ambiente de teste isolado para escrita de arquivos. Criar arquivos fonte de exemplo com diferentes cenários (bloco único, múltiplos blocos, caminhos com subdiretórios, blocos vazios, blocos com erro de formato). Mockar interações com o sistema de arquivos pode ser útil para testes unitários da lógica de parsing, mas a escrita real em `tmp_path` é preferível para testes de integração. **NÃO** é necessária a flag `--live` para este script, pois ele não depende de APIs externas ou comandos complexos.
ACCEPTANCE_CRITERIA:
- [ ] Configuração do `pytest` completa (dependências, fixtures básicas).
- [ ] Testes unitários validam a função de parsing dos blocos demarcados.
- [ ] Testes de integração (usando `tmp_path`) cobrem:
    - Leitura e parsing de arquivo fonte válido com um ou múltiplos blocos.
    - Criação correta de subdiretórios necessários.
    - Escrita correta do conteúdo nos arquivos de destino (sobrescrita).
    - Tratamento correto de caminhos relativos.
    - Falha graciosa se o arquivo fonte não for encontrado.
    - Falha (ou aviso e skip) se um caminho no bloco for inválido ou tentar sair do diretório raiz.
    - Verificação do conteúdo dos arquivos escritos.
- [ ] Cobertura de cenários de borda (ex: conteúdo vazio, delimitadores ausentes/malformados no input).
- [ ] CI: Workflow `.github/workflows/laravel.yml` atualizado para executar `python -m pytest tests/python/`.
- [ ] Qualidade: Código dos testes formatado (Pint/Black) e passando em análise estática (PHPStan/Mypy, se configurado para Python).
------
TITLE: [TEST][DevTools] Testar Lógica de Criação/Edição de Issues em create_issue.py
TYPE: test
LABELS: test,devtools,python,pytest,issue-automation,github-cli
ASSIGNEE: @me
PROJECT: Laravel 12 Starter Kit
MILESTONE:
PARENT_ISSUE:
TEST_MOTIVATION: Garantir que o script `create_issue.py` parseie corretamente os arquivos de plano, utilize os templates de corpo, interaja com a `gh` CLI para criar ou editar issues, e gerencie labels, milestones e projetos conforme especificado.
TEST_SCOPE: Testes unitários para parsing de blocos `KEY: VALUE` e lógica de substituição de templates. Testes de integração para a interação com a `gh` CLI. Validar a lógica de encontrar issues existentes, a construção correta dos comandos `gh issue create` e `gh issue edit` (com flags apropriadas para título, corpo, labels, assignee, milestone, projeto), e a criação/verificação de labels e milestones via `gh label create` e `gh milestone create`. Testar tratamento de erros (ex: `gh` falha, projeto/milestone não encontrado).
TEST_APPROACH: Utilizar `pytest`. **Implementar a flag `--live` OBRIGATÓRIA**. Modo mock (padrão): usar `unittest.mock` para simular `subprocess.run` chamado por `run_command`, verificando se os comandos `gh` corretos seriam executados com os argumentos esperados. Modo live (`pytest --live`): **requer `gh` CLI instalado e autenticado (via `gh auth login` ou `GH_TOKEN`) e um repositório de teste configurado** (possivelmente via variável de ambiente `GH_TEST_REPO`). O modo live executará chamadas reais à API do GitHub para criar/editar issues, labels e milestones neste repositório de teste. Usar fixtures `pytest` para setup/teardown (ex: criar arquivos de plano temporários, limpar issues/labels/milestones criados no repo de teste após a execução no modo live).
ACCEPTANCE_CRITERIA:
- [ ] Configuração do `pytest` completa (dependências, fixtures, mocks).
- [ ] Testes unitários validam parsing de blocos `KEY: VALUE` e preenchimento de templates.
- [ ] Testes de integração cobrem a interação com a `gh` CLI.
- [ ] **OBRIGATÓRIO:** Testes podem ser executados em modo 'mock' (padrão, para CI, simula `gh`) e modo 'live' (com flag `--live`, usa `gh` real em repo de teste).
- [ ] Teste verifica a lógica de encontrar issue existente por título.
- [ ] Teste verifica a construção correta do comando `gh issue create` (flags `-t`, `-F -`, `-l`, `-a`, `-m`, `-p`).
- [ ] Teste verifica a construção correta do comando `gh issue edit` (flags `--add-label`, `--add-assignee`, `-m`).
- [ ] Teste verifica a lógica de criação/verificação de labels (com `--color`).
- [ ] Teste verifica a lógica de criação/verificação de milestones (com `--description`).
- [ ] Teste verifica a lógica de busca de projetos (`@me` e `owner`).
- [ ] Teste verifica o tratamento de erros (ex: falha no `gh`, projeto não encontrado, milestone obrigatório ausente).
- [ ] Teste verifica o parsing correto de valores multi-linha e remoção de comentários.
- [ ] CI: Workflow `.github/workflows/laravel.yml` atualizado para executar `python -m pytest tests/python/` (modo mock).
- [ ] Qualidade: Código dos testes formatado (Pint/Black) e passando em análise estática (PHPStan/Mypy, se configurado para Python).
------
TITLE: [TEST][DevTools] Testar Análise de Argumentos, Manipulação de Contexto e Fluxo Básico em llm_interact.py
TYPE: test
LABELS: test,devtools,python,pytest,llm-interaction
ASSIGNEE: @me
PROJECT: Laravel 12 Starter Kit
MILESTONE:
PARENT_ISSUE:
TEST_MOTIVATION: Validar a configuração inicial, o parsing de argumentos, a descoberta de tarefas, o carregamento/preenchimento de templates, a localização e o carregamento do contexto (padrão e selecionado), e o funcionamento das flags de controle de fluxo (`--only-*`) no script `llm_interact.py`.
TEST_SCOPE: Testes unitários e de integração para as funções `parse_arguments`, `find_available_tasks`, `find_available_meta_tasks`, `load_and_fill_template`, `find_latest_context_dir`, `prepare_context_parts`. Testar a lógica de seleção interativa de tarefas e a lógica de controle de fluxo baseada nas flags `--only-meta` e `--only-prompt`. Validar o carregamento de contexto padrão (último + comum) e o carregamento baseado na seleção preliminar (`--select-context`). Testar o tratamento de erros para arquivos/diretórios não encontrados.
TEST_APPROACH: Utilizar `pytest`. Mockar interações com o sistema de arquivos (`pathlib.Path.glob`, `is_file`, `read_text`) para testes unitários das funções de descoberta/carga. Usar `tmp_path` fixture para criar estruturas de diretório de teste para contexto e templates. Mockar `subprocess.run` para a função `find_latest_context_dir` (se ela usar git). **NÃO** é necessária a flag `--live` para este escopo, pois não envolve chamadas API ou comandos externos complexos *nesta* funcionalidade. Validar a estrutura e o conteúdo das variáveis (`context_parts`, `initial_prompt_content_current`) após o processamento.
ACCEPTANCE_CRITERIA:
- [ ] Configuração do `pytest` completa (dependências, fixtures, mocks).
- [ ] Teste verifica o parsing correto de todos os argumentos de linha de comando.
- [ ] Teste verifica a descoberta correta de tarefas diretas e meta-tarefas.
- [ ] Teste verifica a seleção interativa de tarefas quando o argumento `task` é omitido.
- [ ] Teste verifica o carregamento e preenchimento correto de templates com variáveis (`__VAR__`).
- [ ] Teste verifica a localização correta do diretório de contexto mais recente.
- [ ] Teste verifica o carregamento correto dos arquivos de contexto padrão (último + comum) e a aplicação de `--exclude-context`.
- [ ] Teste verifica o carregamento correto dos arquivos de contexto selecionados (quando `--select-context` está ativo e uma lista é fornecida/confirmada), incluindo a atualização de caminhos e a aplicação de `--exclude-context`.
- [ ] Teste verifica o funcionamento da flag `--only-meta`.
- [ ] Teste verifica o funcionamento da flag `--only-prompt`.
- [ ] Teste verifica o tratamento de erros para templates ou diretórios de contexto não encontrados.
- [ ] CI: Workflow `.github/workflows/laravel.yml` atualizado para executar `python -m pytest tests/python/`.
- [ ] Qualidade: Código dos testes formatado (Pint/Black) e passando em análise estática (PHPStan/Mypy, se configurado para Python).
------
TITLE: [TEST][DevTools] Testar Interação com API Gemini em llm_interact.py
TYPE: test
LABELS: test,devtools,python,pytest,llm-interaction,api-integration
ASSIGNEE: @me
PROJECT: Laravel 12 Starter Kit
MILESTONE:
PARENT_ISSUE:
TEST_MOTIVATION: Garantir que o script `llm_interact.py` interaja corretamente com a API do Google Gemini, incluindo inicialização do cliente, passagem de contexto/prompts, tratamento de erros da API, lógica de retentativa com observação, rotação de API keys e configuração de ferramentas (web search).
TEST_SCOPE: Testes de integração focados na função `execute_gemini_call` e nas funções relacionadas à API (`initialize_genai_client`, `rotate_api_key_and_reinitialize`). Validar a construção correta do payload da API (conteúdo, config, ferramentas), a interpretação das respostas (texto, erros, feedback), a lógica de retentativa quando o usuário fornece observação, o mecanismo de rotação de API keys em caso de rate limit (429/ResourceExhausted) e o tratamento de outros erros da API.
TEST_APPROACH: Utilizar `pytest`. **Implementar a flag `--live` OBRIGATÓRIA**. Modo mock (padrão): mockar a biblioteca `google.genai.Client` e seus métodos (`generate_content`) para simular respostas de sucesso, erro (429, outros) e bloqueio, verificando se a lógica de retentativa, rotação de chave e tratamento de erro do script é acionada corretamente. Modo live (`pytest --live`): **requer `google-genai` instalado e uma ou mais `GEMINI_API_KEY`(s) válidas no `.env` (formato `key1|key2|...`).** Executar chamadas reais à API Gemini (usar modelos rápidos como `gemini-1.5-flash` para minimizar custos/tempo), verificando se respostas válidas são recebidas ou se erros esperados (como rate limit, se possível simular/induzir com múltiplas chaves) são tratados. Cuidado com custos e limites de taxa no modo live. Usar fixtures para configurar as API Keys no ambiente de teste.
ACCEPTANCE_CRITERIA:
- [ ] Configuração do `pytest` completa (dependências, fixtures, mocks para `google.genai`).
- [ ] Teste verifica a inicialização correta do cliente Gemini com a API Key do `.env`.
- [ ] Teste verifica a construção correta do payload para `generate_content` (conteúdo, config, ferramentas).
- [ ] **OBRIGATÓRIO:** Testes podem ser executados em modo 'mock' (padrão, para CI) e modo 'live' (com flag `--live`, usa API Key real).
- [ ] Teste (mock) verifica a lógica de retentativa quando o usuário fornece observação ('n').
- [ ] Teste (mock) verifica a rotação de API key em caso de erro 429/ResourceExhausted.
- [ ] Teste (mock) verifica o tratamento de outros erros da API (ex: ServerError).
- [ ] Teste (mock) verifica o tratamento de prompt bloqueado (AC27 #38).
- [ ] Teste (live, opcional mas recomendado) verifica chamada bem-sucedida à API Gemini para uma tarefa simples.
- [ ] Teste (live, opcional mas recomendado) verifica se a flag `--web-search` funciona (pode ser difícil de verificar deterministicamente).
- [ ] CI: Workflow `.github/workflows/laravel.yml` atualizado para executar `python -m pytest tests/python/` (modo mock).
- [ ] Qualidade: Código dos testes formatado (Pint/Black) e passando em análise estática (PHPStan/Mypy, se configurado para Python).
------
TITLE: [TEST][DevTools] Testar Lógica de Tarefas e Manipulação de Saída em llm_interact.py
TYPE: test
LABELS: test,devtools,python,pytest,llm-interaction,task-logic,github-cli
ASSIGNEE: @me
PROJECT: Laravel 12 Starter Kit
MILESTONE:
PARENT_ISSUE:
TEST_MOTIVATION: Validar a lógica específica de cada tarefa (`create-pr`, `manifest-summary`, etc.) após a interação com a API Gemini, incluindo o parsing da resposta da LLM, a execução de ações subsequentes (salvar arquivo, chamar `gh pr create`) e o tratamento de erros nesses passos finais.
TEST_SCOPE: Testes de integração para cada fluxo de tarefa principal. Para `create-pr`: testar o parsing do título/corpo, a verificação de novos commits e a construção/execução do comando `gh pr create`. Para `manifest-summary`: testar a seleção de arquivos, batching, parsing de resumos e atualização do arquivo `manifest.json`. Para outras tarefas: validar o salvamento correto da resposta final no diretório esperado. Cobrir cenários de sucesso e falha (ex: parsing falha, `gh` falha, erro ao salvar arquivo).
TEST_APPROACH: Utilizar `pytest`. **Implementar a flag `--live` OBRIGATÓRIA** para a task `create-pr` (para interação real com `gh`). Para outras tasks, o modo mock pode ser suficiente. Modo mock (padrão): mockar a resposta da API Gemini (segunda etapa) com formatos válidos e inválidos. Mockar `subprocess.run` para comandos `gh` e `git`. Mockar interações com sistema de arquivos (`pathlib`, `json.dump`, `shutil`). Modo live (`pytest --live`): **requer `gh` instalado/autenticado e repo de teste** para `create-pr`. Para `manifest-summary`, pode-se testar a atualização de um arquivo `manifest.json` de exemplo em `tmp_path`. Usar fixtures `pytest` para criar arquivos de entrada (`manifest.json` de teste) e verificar arquivos de saída ou mocks de comandos.
ACCEPTANCE_CRITERIA:
- [ ] Configuração do `pytest` completa (dependências, fixtures, mocks).
- [ ] **OBRIGATÓRIO:** Testes para `create-pr` podem ser executados em modo 'mock' (padrão, simula `gh`) e modo 'live' (com flag `--live`, usa `gh` real em repo de teste). Testes para outras tasks podem usar mock.
- [ ] Teste (`create-pr`) verifica o parsing correto de título/corpo do PR.
- [ ] Teste (`create-pr`) verifica a função `check_new_commits` (mock/live).
- [ ] Teste (`create-pr`) verifica a construção correta do comando `gh pr create` (com flags `--title`, `--body`, `--head`, `--base`, `--draft`).
- [ ] Teste (`create-pr`, live) verifica a criação bem-sucedida de um PR no repo de teste.
- [ ] Teste (`create-pr`) verifica o tratamento de erro se `gh pr create` falhar.
- [ ] Teste (`manifest-summary`) verifica a seleção de arquivos para resumo (baseado em hash/summary nulo).
- [ ] Teste (`manifest-summary`) verifica o parsing correto dos resumos da resposta da API.
- [ ] Teste (`manifest-summary`) verifica a atualização correta do arquivo `manifest.json` em `tmp_path`.
- [ ] Teste para outras tarefas verifica o salvamento correto da resposta no diretório/arquivo esperado (`llm_outputs/task_name/timestamp.txt`).
- [ ] CI: Workflow `.github/workflows/laravel.yml` atualizado para executar `python -m pytest tests/python/` (modo mock).
- [ ] Qualidade: Código dos testes formatado (Pint/Black) e passando em análise estática (PHPStan/Mypy, se configurado para Python).
------
TITLE: [TEST][DevTools] Testar Análise de Argumentos e Configuração em generate_manifest.py
TYPE: test
LABELS: test,devtools,python,pytest,manifest
ASSIGNEE: @me
PROJECT: Laravel 12 Starter Kit
MILESTONE:
PARENT_ISSUE:
TEST_MOTIVATION: Garantir que o script `generate_manifest.py` interprete corretamente os argumentos de linha de comando (`--output`, `--ignore`, `--verbose`, etc.), determine o caminho de saída padrão corretamente e carregue o manifesto anterior para processamento incremental.
TEST_SCOPE: Testes unitários para a função `parse_arguments` e funções relacionadas à determinação de caminhos e carregamento do manifesto anterior (`get_default_output_filepath`, `load_previous_manifest`). Validar diferentes combinações de argumentos, o formato do caminho de saída padrão e a leitura/parsing correto de um arquivo de manifesto JSON de exemplo. Testar o tratamento de erro se o manifesto anterior não existir ou for inválido.
TEST_APPROACH: Utilizar `pytest`. Usar `unittest.mock.patch` para simular `sys.argv`. Mockar `pathlib.Path.glob`, `is_file`, `read_text` e `json.load` para isolar a lógica de carregamento do manifesto anterior. Usar `tmp_path` para criar arquivos de manifesto de teste. **NÃO** é necessária a flag `--live`.
ACCEPTANCE_CRITERIA:
- [ ] Configuração do `pytest` completa (dependências, fixtures, mocks).
- [ ] Teste verifica o parsing correto do argumento `--output`.
- [ ] Teste verifica a geração correta do caminho de saída padrão (formato `scripts/data/YYYYMMDD_HHMMSS_manifest.json`).
- [ ] Teste verifica o parsing correto do argumento `--ignore` (múltiplas ocorrências).
- [ ] Teste verifica o parsing correto das flags booleanas (`--verbose`).
- [ ] Teste verifica o carregamento bem-sucedido de um arquivo de manifesto anterior válido.
- [ ] Teste verifica o retorno de um dicionário vazio se nenhum manifesto anterior for encontrado.
- [ ] Teste verifica o tratamento de erro (retornando dicionário vazio) se o manifesto anterior for inválido (JSON malformado ou estrutura incorreta).
- [ ] CI: Workflow `.github/workflows/laravel.yml` atualizado para executar `python -m pytest tests/python/`.
- [ ] Qualidade: Código dos testes formatado (Pint/Black) e passando em análise estática (PHPStan/Mypy, se configurado para Python).
------
TITLE: [TEST][DevTools] Testar Execução de Comandos Externos em generate_context.py
TYPE: test
LABELS: test,devtools,python,pytest,context-generation,subprocesses
ASSIGNEE: @me
PROJECT: Laravel 12 Starter Kit
MILESTONE:
PARENT_ISSUE:
TEST_MOTIVATION: Validar a robustez da função `run_command` e o tratamento de ferramentas opcionais/essenciais no script `generate_context.py`.
TEST_SCOPE: Testes unitários e de integração para a função `run_command`. Testar a execução de comandos válidos e inválidos, captura de stdout/stderr, tratamento de diferentes códigos de saída e timeouts. Testar a lógica que verifica a existência de comandos essenciais (`git`, `php`) e opcionais (`gh`, `jq`, etc.) usando `command_exists` e a escrita correta de avisos (`write_warning_to_file`) quando ferramentas opcionais estão ausentes.
TEST_APPROACH: Utilizar `pytest`. Mockar `subprocess.run` extensivamente para simular diferentes cenários de execução de comandos (sucesso, falha com stderr, timeout, comando não encontrado) e verificar se `run_command` retorna os valores corretos e escreve os logs apropriados. Mockar `shutil.which` para simular a presença/ausência de ferramentas essenciais e opcionais. Verificar o conteúdo dos arquivos de aviso gerados por `write_warning_to_file`. **NÃO** é necessária a flag `--live` para este escopo.
ACCEPTANCE_CRITERIA:
- [ ] Configuração do `pytest` completa (dependências, fixtures, mocks para `subprocess` e `shutil`).
- [ ] Teste (`run_command`) verifica captura correta de stdout/stderr para comandos bem-sucedidos.
- [ ] Teste (`run_command`) verifica tratamento correto de erro para comando não encontrado (`FileNotFoundError`).
- [ ] Teste (`run_command`) verifica tratamento correto de erro para timeout (`TimeoutExpired`).
- [ ] Teste (`run_command`) verifica tratamento correto de erro para código de saída != 0 (com `check=False`), incluindo escrita do erro no arquivo de saída.
- [ ] Teste verifica a detecção correta de comandos essenciais (`git`, `php`) ausentes e a saída com erro.
- [ ] Teste verifica a detecção correta de comandos opcionais ausentes (`gh`, `jq`, etc.).
- [ ] Teste verifica a escrita correta da mensagem de aviso no arquivo de saída apropriado quando um comando opcional está ausente.
- [ ] Teste verifica se o script continua a execução quando comandos opcionais estão ausentes.
- [ ] CI: Workflow `.github/workflows/laravel.yml` atualizado para executar `python -m pytest tests/python/`.
- [ ] Qualidade: Código dos testes formatado (Pint/Black) e passando em análise estática (PHPStan/Mypy, se configurado para Python).
------
TITLE: [TEST][DevTools] Testar Coleta de Informações Específicas em generate_context.py
TYPE: test
LABELS: test,devtools,python,pytest,context-generation,integration
ASSIGNEE: @me
PROJECT: Laravel 12 Starter Kit
MILESTONE:
PARENT_ISSUE:
TEST_MOTIVATION: Validar a lógica específica de cada função de coleta de informações (`collect_git_info`, `collect_gh_info`, `collect_artisan_info`, etc.) no script `generate_context.py`, garantindo que os comandos corretos sejam chamados e os arquivos de saída apropriados sejam gerados.
TEST_SCOPE: Testes de integração para as principais funções de coleta. Focar em verificar se os comandos externos esperados são chamados com os argumentos corretos e se os arquivos de saída são criados no diretório correto. Validar a lógica de tratamento de limites (ex: `--issue-limit`).
TEST_APPROACH: Utilizar `pytest`. **Implementar a flag `--live` OBRIGATÓRIA**. Modo mock (padrão): mockar a função `run_command` para verificar se ela é chamada com os argumentos corretos para cada comando externo (`git log`, `gh pr list`, `php artisan route:list`, etc.) dentro de cada função `collect_*`. Modo live (`pytest --live`): **requer ambiente completo configurado** (Laravel funcional, Git repo, `gh` autenticado). Executar as funções `collect_*` reais e verificar se os arquivos de saída são criados em `tmp_path`. A verificação do *conteúdo* exato pode ser complexa e talvez não necessária para todos os comandos, mas a existência do arquivo e a ausência de erros na execução `run_command` (via modo live) são importantes. Usar fixtures para configurar um ambiente mínimo se possível (ex: repo git de teste).
ACCEPTANCE_CRITERIA:
- [ ] Configuração do `pytest` completa (dependências, fixtures, mocks para `run_command`).
- [ ] **OBRIGATÓRIO:** Testes podem ser executados em modo 'mock' (padrão, verifica chamadas a `run_command`) e modo 'live' (com flag `--live`, executa comandos reais em `tmp_path`).
- [ ] Teste (mock) verifica se `collect_git_info` chama os comandos `git` corretos.
- [ ] Teste (mock) verifica se `collect_gh_info` chama os comandos `gh` corretos (considerando limites).
- [ ] Teste (mock) verifica se `collect_gh_project_info` chama `gh project item-list` corretamente.
- [ ] Teste (mock) verifica se `collect_artisan_info` chama os comandos `php artisan` corretos.
- [ ] Teste (mock) verifica se `collect_dependency_info` chama `composer show` e `npm list`.
- [ ] Teste (mock) verifica se `collect_structure_info` chama `tree` e `cloc` (se existirem).
- [ ] Teste (mock) verifica se `run_quality_checks` chama `phpstan` e `pint`.
- [ ] Teste (mock) verifica se `run_tests` chama `php artisan test`.
- [ ] Teste (mock) verifica se `run_dusk_tests` chama `php artisan dusk`.
- [ ] Teste (live) executa as funções `collect_*` e verifica a criação dos arquivos de saída em `tmp_path` sem erros fatais.
- [ ] CI: Workflow `.github/workflows/laravel.yml` atualizado para executar `python -m pytest tests/python/` (modo mock).
- [ ] Qualidade: Código dos testes formatado (Pint/Black) e passando em análise estática (PHPStan/Mypy, se configurado para Python).
------
TITLE: [TEST][DevTools] Testar Geração e Cópia do Manifesto em generate_context.py
TYPE: test
LABELS: test,devtools,python,pytest,context-generation,manifest
ASSIGNEE: @me
PROJECT: Laravel 12 Starter Kit
MILESTONE:
PARENT_ISSUE:
TEST_MOTIVATION: Garantir que o script `generate_context.py` invoque corretamente o `generate_manifest.py`, copie o manifesto JSON resultante para o diretório de contexto e gere o arquivo `manifest.md` final listando todos os arquivos coletados, incluindo o JSON copiado.
TEST_SCOPE: Testes de integração focados nas etapas finais do script `generate_context.py`: a chamada ao `generate_manifest.py`, a cópia do arquivo JSON e a geração do `manifest.md`. Verificar a construção correta do comando para chamar `generate_manifest.py`. Validar a lógica de busca e cópia do arquivo `_manifest.json` mais recente. Verificar o conteúdo do `manifest.md` gerado.
TEST_APPROACH: Utilizar `pytest`. Mockar `subprocess.run` para simular a execução de `generate_manifest.py` e seu código de saída. Usar `tmp_path` para criar um diretório de dados (`scripts/data`) com arquivos `_manifest.json` de exemplo e um diretório de saída de contexto temporário. Executar a parte final do `generate_context.py` (ou funções `copy_latest_manifest_json` e `generate_manifest`) e verificar se o JSON correto é copiado para o diretório de saída e se o `manifest.md` final contém a lista esperada de arquivos (incluindo o JSON). **NÃO** é necessária a flag `--live`.
ACCEPTANCE_CRITERIA:
- [ ] Configuração do `pytest` completa (dependências, fixtures, mocks para `subprocess` e `shutil`).
- [ ] Teste verifica a construção correta do comando para chamar `generate_manifest.py`.
- [ ] Teste simula sucesso e falha na execução de `generate_manifest.py` e verifica o log de aviso.
- [ ] Teste verifica a lógica de encontrar o arquivo `_manifest.json` mais recente em `scripts/data/`.
- [ ] Teste verifica a cópia correta do `_manifest.json` mais recente para o diretório de contexto de saída.
- [ ] Teste verifica o tratamento correto se nenhum `_manifest.json` for encontrado para cópia.
- [ ] Teste verifica a criação do arquivo `manifest.md` no diretório de saída.
- [ ] Teste verifica se o `manifest.md` gerado contém a lista correta de todos os arquivos presentes no diretório de saída, incluindo o `_manifest.json` copiado.
- [ ] CI: Workflow `.github/workflows/laravel.yml` atualizado para executar `python -m pytest tests/python/`.
- [ ] Qualidade: Código dos testes formatado (Pint/Black) e passando em análise estática (PHPStan/Mypy, se configurado para Python).