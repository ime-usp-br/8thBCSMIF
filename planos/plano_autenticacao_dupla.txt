## Ordem Sugerida: 1, 2, 3, 4, 5, 6, 7
TITLE: [AUTH][UI] Implementar View de Login com Opções Duplas (Senha Única + Local)
TYPE: feature
LABELS: autenticacao,ui,feature,todo,livewire,tailwind
ASSIGNEE: @me
PROJECT: laravel_12_starter_kit
FEATURE_MOTIVATION: Permitir que os usuários escolham entre autenticação via Senha Única USP ou credenciais locais (email/senha).
FEATURE_DESCRIPTION: Adaptar a view `auth.login` (provavelmente baseada no preset Breeze TALL Stack) para apresentar claramente as duas opções de login. Incluir um botão/link para redirecionar ao fluxo da Senha Única e os campos padrão (email/senha) para o login local. Garantir conformidade visual com as diretrizes básicas da USP e responsividade. Utilizar componentes Livewire/Alpine.js conforme o preset TALL.
PROPOSED_SOLUTION: Modificar `resources/views/auth/login.blade.php`. Adicionar um botão "Entrar com Senha Única USP" que aponte para a rota de redirecionamento do Socialite (`/login/senhaunica` ou similar). Manter os campos de email e senha para o login local. Estilizar com Tailwind CSS.
ACCEPTANCE_CRITERIA:
- [ ] View `auth.login.blade.php` (ou componente Livewire equivalente) renderizada corretamente.
- [ ] Botão/Link "Entrar com Senha Única USP" visível e funcional (redireciona para a rota correta).
- [ ] Campos "Email" e "Senha" para login local visíveis e funcionais.
- [ ] Link "Esqueci minha senha" para o fluxo local visível.
- [ ] Link para a página de registro visível.
- [ ] Layout visualmente alinhado com as diretrizes básicas da USP.
- [ ] Layout responsivo em diferentes tamanhos de tela.
- [ ] Código formatado com Pint (`./vendor/bin/pint`).
- [ ] Passar na análise estática do Larastan (`./vendor/bin/phpstan analyse`).
- [ ] Teste de feature (possivelmente usando Dusk) verifica a presença e funcionalidade básica dos elementos na tela de login.
------
TITLE: [AUTH][UI] Implementar View de Registro Único (Senha Única + Local)
TYPE: feature
LABELS: autenticacao,ui,feature,todo,livewire,tailwind,validacao
ASSIGNEE: @me
PROJECT: laravel_12_starter_kit
FEATURE_MOTIVATION: Unificar o processo de registro para usuários USP e externos, solicitando informações adicionais (Nº USP) apenas quando necessário.
FEATURE_DESCRIPTION: Adaptar a view `auth.register` (provavelmente baseada no Breeze TALL Stack) para incluir um campo condicional para o Número USP (codpes). Este campo deve aparecer se o email digitado for `@usp.br` ou se um checkbox "Sou da USP" for marcado. Implementar a lógica frontend (provavelmente com Alpine.js ou Livewire state) para mostrar/ocultar o campo Nº USP. Garantir validação frontend básica (se aplicável) e feedback visual. Manter conformidade visual USP e responsividade.
PROPOSED_SOLUTION: Modificar `resources/views/auth/register.blade.php` (ou componente Livewire equivalente). Adicionar checkbox "Sou da USP". Adicionar campo `codpes` (Nº USP), inicialmente oculto. Usar JavaScript (Alpine.js ou lógica Livewire) para exibir o campo `codpes` se o email terminar em `@usp.br` ou se o checkbox for marcado. O campo `codpes` deve ser `required` apenas quando visível.
ACCEPTANCE_CRITERIA:
- [ ] View `auth.register.blade.php` (ou componente Livewire equivalente) renderizada corretamente.
- [ ] Campos padrão de registro (Nome, Email, Senha, Confirmação de Senha) presentes.
- [ ] Checkbox "Sou da USP" presente.
- [ ] Campo "Número USP (codpes)" presente, mas inicialmente oculto.
- [ ] Campo "Número USP (codpes)" é exibido se o email digitado terminar com `@usp.br`.
- [ ] Campo "Número USP (codpes)" é exibido se o checkbox "Sou da USP" for marcado.
- [ ] Campo "Número USP (codpes)" é oculto se nenhuma das condições acima for atendida.
- [ ] Validação frontend (HTML5 `required`) aplicada condicionalmente ao campo `codpes`.
- [ ] Layout visualmente alinhado com as diretrizes básicas da USP.
- [ ] Layout responsivo.
- [ ] Código formatado com Pint.
- [ ] Passar na análise do Larastan.
- [ ] Teste de feature (possivelmente usando Dusk) verifica a lógica de exibição condicional do campo Nº USP.
------
TITLE: [AUTH][UI] Implementar Views para Fluxo de Reset de Senha (Local)
TYPE: feature
LABELS: autenticacao,ui,feature,todo,local-auth,livewire,tailwind
ASSIGNEE: @me
PROJECT: laravel_12_starter_kit
FEATURE_MOTIVATION: Permitir que usuários com contas locais (não-USP) possam redefinir suas senhas esquecidas.
FEATURE_DESCRIPTION: Implementar/Adaptar as views Blade (ou componentes Livewire) necessárias para o fluxo de reset de senha padrão do Laravel Breeze (TALL Stack): 1) Formulário de solicitação de link (`forgot-password`), 2) Formulário de redefinição de senha (`reset-password`). Garantir que estas views estejam visualmente consistentes com o restante da aplicação (diretrizes USP, Tailwind).
PROPOSED_SOLUTION: Utilizar os comandos `php artisan breeze:install` (se ainda não totalmente feito/customizado) ou copiar/adaptar as views `resources/views/auth/forgot-password.blade.php` e `resources/views/auth/reset-password.blade.php` do Breeze TALL Stack. Customizar o layout e estilos com Tailwind CSS para alinhar com a identidade USP.
ACCEPTANCE_CRITERIA:
- [ ] View `auth.forgot-password.blade.php` (ou equivalente) renderizada corretamente com campo de email e botão de envio.
- [ ] View `auth.reset-password.blade.php` (ou equivalente) renderizada corretamente com campos de email, senha, confirmação de senha e token oculto.
- [ ] Views utilizam o layout base da aplicação.
- [ ] Estilos visuais consistentes com as diretrizes USP e Tailwind.
- [ ] Layouts responsivos.
- [ ] Código formatado com Pint.
- [ ] Passar na análise do Larastan.
- [ ] Teste de feature (possivelmente Dusk) verifica a renderização correta das views.
------
TITLE: [AUTH][UI] Implementar View/Lógica de Notificação de Verificação de Email (Local)
TYPE: feature
LABELS: autenticacao,ui,feature,todo,local-auth,livewire,tailwind
ASSIGNEE: @me
PROJECT: laravel_12_starter_kit
FEATURE_MOTIVATION: Informar usuários com contas locais recém-registradas que eles precisam verificar seu endereço de email e permitir o reenvio do link de verificação.
FEATURE_DESCRIPTION: Implementar/Adaptar a view Blade (ou componente Livewire) `auth.verify-email` (baseada no Breeze TALL Stack). Esta view deve informar ao usuário que um link de verificação foi enviado e apresentar um botão para reenviar o link de verificação. Garantir consistência visual e responsividade.
PROPOSED_SOLUTION: Utilizar/Adaptar a view `resources/views/auth/verify-email.blade.php` do Breeze TALL Stack. Incluir texto informativo e um formulário com botão que faça POST para a rota de reenvio (`verification.send`). Customizar estilos com Tailwind CSS.
ACCEPTANCE_CRITERIA:
- [ ] View `auth.verify-email.blade.php` (ou equivalente) renderizada corretamente quando acessada por um usuário não verificado.
- [ ] Mensagem clara instruindo o usuário a verificar seu email.
- [ ] Botão/Formulário para reenviar o email de verificação presente e funcional.
- [ ] View utiliza o layout base da aplicação.
- [ ] Estilos visuais consistentes com as diretrizes USP e Tailwind.
- [ ] Layout responsivo.
- [ ] Código formatado com Pint.
- [ ] Passar na análise do Larastan.
- [ ] Teste de feature (possivelmente Dusk) verifica a renderização correta da view e a presença do botão de reenvio.
------
TITLE: [AUTH][Backend] Implementar Lógica de Callback da Senha Única USP
TYPE: feature
LABELS: autenticacao,backend,feature,todo,senha-unica,socialite
ASSIGNEE: @me
PROJECT: laravel_12_starter_kit
FEATURE_MOTIVATION: Autenticar usuários que retornam do servidor OAuth da Senha Única USP, criando ou atualizando seus registros locais e estabelecendo a sessão.
FEATURE_DESCRIPTION: Implementar a lógica no método `handleProviderCallback` de um Controller (ex: `SocialiteController`). Este método deve: 1) Obter os dados do usuário do Socialite (`Socialite::driver('senhaunica')->user()`). 2) Utilizar o `codpes` retornado para buscar ou criar um registro na tabela `users` local (usando o Trait `HasSenhaunica`). 3) Garantir que o usuário local tenha as permissões de vínculo corretas sincronizadas (via `syncPermissions`/`assignRole` do Spatie/Senhaunica, considerando os vínculos retornados pelo OAuth). 4) Logar o usuário na aplicação (`Auth::login()`). 5) Redirecionar o usuário para o dashboard ou página de destino apropriada. Implementar tratamento de erros para falhas no callback do Socialite.
PROPOSED_SOLUTION: Criar `app/Http/Controllers/Auth/SocialiteController.php`. Implementar `redirectToProvider` e `handleProviderCallback`. Usar `User::firstOrCreate(['codpes' => $userSocialite->codpes], ['name' => $userSocialite->nompes, 'email' => $userSocialite->email])`. Chamar `$user->syncPermissions($user->listarPermissoesVinculo($userSocialite->vinculo))` (ou método equivalente do `HasSenhaunica`). Usar `Auth::login($user, true)`. Redirecionar com `redirect()->intended('/')`.
TECHNICAL_DETAILS: Verificar a estrutura exata dos dados retornados por `$userSocialite = Socialite::driver('senhaunica')->user()`. Garantir que as permissões de vínculo (ex: `Docente`, `Alunogr`, `Servidor`) sejam criadas corretamente no guard `senhaunica` e atribuídas ao usuário.
ACCEPTANCE_CRITERIA:
- [ ] Rota de callback (`/callback`) corretamente definida e apontando para `SocialiteController@handleProviderCallback`.
- [ ] Método `handleProviderCallback` obtém dados do usuário via `Socialite::driver('senhaunica')->user()`.
- [ ] Usuário local é encontrado ou criado com base no `codpes` retornado.
- [ ] Nome e email do usuário local são atualizados (se já existir) com os dados da Senha Única.
- [ ] Permissões de vínculo no guard `senhaunica` são corretamente sincronizadas/atribuídas ao usuário local.
- [ ] Usuário é logado com sucesso na aplicação (`Auth::check()` retorna true).
- [ ] Usuário é redirecionado para a página correta após o login (`redirect()->intended()` ou similar).
- [ ] Exceções do Socialite (ex: token inválido, erro na API) são tratadas adequadamente (ex: redirecionamento para login com mensagem de erro).
- [ ] Código formatado com Pint.
- [ ] Passar na análise do Larastan.
- [ ] DocBlocks claros para os métodos do controller.
- [ ] Teste de feature utilizando `FakeSenhaUnicaSocialiteProvider` simula o callback, verifica criação/login do usuário e atribuição de permissões de vínculo.
------
TITLE: [AUTH][Backend] Implementar Lógica de Registro Local com Validação Replicado
TYPE: feature
LABELS: autenticacao,backend,feature,todo,local-auth,replicado,validation
ASSIGNEE: @me
PROJECT: laravel_12_starter_kit
FEATURE_MOTIVATION: Validar e registrar novos usuários locais, diferenciando usuários USP (com validação via Replicado) e externos, e atribuindo roles apropriados.
FEATURE_DESCRIPTION: Implementar a lógica no método `store` de um Controller de Registro (ex: `RegisteredUserController` do Breeze adaptado). Este método deve: 1) Validar os dados do formulário usando um Form Request (ex: `RegisterUserRequest`). 2) Se o registro for de um usuário USP (email `@usp.br` ou checkbox marcado): a) Validar se o Número USP (`codpes`) e o Email correspondem a uma pessoa válida no Replicado usando o `ReplicadoService`. b) Se inválido, retornar erro de validação. 3) Se a validação passar: a) Criar o novo usuário na tabela `users`. b) Atribuir o role `usp_user` (se validado no Replicado) ou `external_user` (se não for USP ou a validação falhar por indisponibilidade) usando `spatie/laravel-permission`. c) Disparar o evento `Registered` para enviar o email de verificação. d) Logar o novo usuário. e) Redirecionar para a página apropriada (ex: dashboard ou aviso de verificação de email). Implementar tratamento de erro caso o Replicado esteja indisponível.
PROPOSED_SOLUTION: Criar/Adaptar `app/Http/Controllers/Auth/RegisteredUserController.php`. Criar `app/Http/Requests/RegisterUserRequest.php` com as regras de validação, incluindo a validação condicional do `codpes`. Injetar `ReplicadoService` no controller. Usar `$user->assignRole('usp_user')` ou `$user->assignRole('external_user')`.
TECHNICAL_DETAILS: O `ReplicadoService` precisará de um método como `validarNuspEmail(int $codpes, string $email): bool`. A validação no Form Request pode usar uma [regra customizada](filtered_laravel_docs#custom-validation-rules) ou uma [Closure de validação](filtered_laravel_docs#using-closures) que chame o `ReplicadoService`. Considerar o que fazer se o Replicado falhar (permitir registro como externo? negar?). Atribuir roles no guard `web`.
ACCEPTANCE_CRITERIA:
- [ ] Rota POST `/register` definida e funcional.
- [ ] `RegisterUserRequest` criado com regras de validação (nome, email, senha, confirmação; `codpes` condicionalmente `required` e `numeric`).
- [ ] Validação customizada no Form Request chama `ReplicadoService->validarNuspEmail()` se for registro USP.
- [ ] Registro falha com erro de validação apropriado se `codpes`/`email` não corresponderem no Replicado (para tipo USP).
- [ ] Tratamento de erro implementado para caso de falha na comunicação com o Replicado (retornar erro 500 ou permitir registro como externo com log de aviso?).
- [ ] Novo usuário é criado com sucesso na tabela `users` se a validação passar.
- [ ] Role `usp_user` é atribuído se o usuário for validado como USP no Replicado.
- [ ] Role `external_user` é atribuído se o usuário não for USP (ou falha na validação Replicado, dependendo da decisão de tratamento de erro).
- [ ] Evento `Illuminate\Auth\Events\Registered` é disparado após a criação do usuário.
- [ ] Usuário é logado automaticamente após o registro.
- [ ] Usuário é redirecionado corretamente após o registro.
- [ ] Código formatado com Pint.
- [ ] Passar na análise do Larastan.
- [ ] DocBlocks claros adicionados aos métodos e classes criadas/modificadas.
- [ ] Teste de feature (usando `FakeReplicadoService`) cobre:
    - Registro de usuário externo bem-sucedido.
    - Registro de usuário USP bem-sucedido (com validação Replicado mockada para sucesso).
    - Falha no registro de usuário USP devido à validação Replicado (mockada para falha).
    - Atribuição correta dos roles `usp_user` e `external_user`.
    - Tratamento de erro quando `ReplicadoService` simula indisponibilidade.
------
TITLE: [AUTH][Config] Configurar e Aplicar Middlewares de Autenticação e Verificação
TYPE: chore
LABELS: autenticacao,configuracao,chore,todo,middleware,guards
ASSIGNEE: @me
PROJECT: laravel_12_starter_kit
CHORE_MOTIVATION: Garantir que as rotas da aplicação estejam corretamente protegidas, exigindo autenticação e/ou verificação de email quando necessário, e utilizando os guards apropriados (`web` e `senhaunica`).
CHORE_DESCRIPTION: Revisar a configuração dos guards de autenticação em `config/auth.php` (o arquivo `config/auth.guards.php` adicionado pela biblioteca parece já cuidar disso, verificar). Revisar os aliases de middleware no Kernel HTTP (se aplicável no L12+) ou em `bootstrap/app.php` para garantir que `auth`, `guest`, `verified` e `signed` estejam disponíveis. Aplicar os middlewares `auth` (ou `auth:web`), `guest` e `verified` às rotas apropriadas (ex: dashboard, páginas de perfil requerem `auth` e talvez `verified`; login/registro requerem `guest`). Assegurar que a rota de callback da Senha Única (`/callback`) e a rota de verificação de email (`/email/verify/{id}/{hash}`) usem os middlewares corretos (`signed`, `auth`).
PROPOSED_SOLUTION: Editar `routes/web.php`. Agrupar rotas que requerem autenticação com `Route::middleware('auth')->group(...)`. Aplicar `middleware('verified')` adicionalmente onde necessário. Aplicar `middleware('guest')` às rotas de login e registro. Verificar middlewares nas rotas de callback/verificação geradas/definidas.
TECHNICAL_DETAILS: O guard `senhaunica` é provavelmente gerenciado internamente pelo pacote Socialite/Senhaunica para o processo de callback e obtenção de permissões. O guard `web` é o padrão para a sessão de usuário logado na aplicação. O middleware `auth` sem argumento geralmente usa o guard padrão (`web`).
ACCEPTANCE_CRITERIA:
- [ ] Configuração dos guards `web` e `senhaunica` em `config/auth.php` verificada (provavelmente já ok devido ao commit `6f3998f`).
- [ ] Aliases de middleware (`auth`, `guest`, `verified`, `signed`) confirmados como disponíveis.
- [ ] Rotas que exigem login (ex: dashboard, perfil) estão protegidas pelo middleware `auth`.
- [ ] Rotas que exigem email verificado (se aplicável, ex: acesso a dados sensíveis) estão protegidas pelo middleware `verified` (além do `auth`).
- [ ] Rotas de login e registro estão protegidas pelo middleware `guest` (redireciona se já logado).
- [ ] Rota de callback da Senha Única (`/callback`) está definida e utiliza os middlewares necessários (geralmente gerenciado pelo Socialite, mas verificar se requer `web`).
- [ ] Rota de verificação de email (`/email/verify/{id}/{hash}`) utiliza os middlewares `auth` e `signed`.
- [ ] Rota de aviso de verificação (`/email/verify`) utiliza o middleware `auth`.
- [ ] Rota de reenvio de verificação (`/email/verification-notification`) utiliza os middlewares `auth` e `throttle`.
- [ ] Código formatado com Pint.
- [ ] Passar na análise do Larastan.
- [ ] Testes de feature verificam:
    - Redirecionamento para login ao tentar acessar rota protegida sem autenticação.
    - Redirecionamento para aviso de verificação ao tentar acessar rota com `verified` sem email verificado.
    - Redirecionamento para dashboard (ou home) ao tentar acessar login/registro estando logado.
    - Acesso negado (403 ou 401) à rota de verificação com assinatura inválida/expirada.