TITLE: [CONFIG] Configurar Base Laravel 12 e Dependências Essenciais2
TYPE: chore
LABELS: configuracao,core,todo
ASSIGNEE: @me
PROJECT: laravel_12_starter_kit # Substitua pelo nome/número real do seu projeto
CHORE_MOTIVATION: Estabelecer a estrutura inicial do projeto Laravel 12 e instalar dependências chave (Replicado, Senha Única, Spatie).
CHORE_DESCRIPTION: Clonar o starter kit base, rodar composer install, npm install, configurar .env básico (sem credenciais USP ainda), gerar chave, rodar migrações iniciais (users, cache, jobs, failed_jobs). Instalar dependências uspdev e spatie/permission via composer. Publicar assets e configurações necessárias dos pacotes.
TECHNICAL_DETAILS: Verificar versões PHP, Composer, Node. Garantir que as migrations padrão do Laravel e dos pacotes rodem sem erros.
ACCEPTANCE_CRITERIA:
- [ ] Repositório clonado e dependências Composer/NPM instaladas
- [ ] Arquivo .env criado a partir do .env.example
- [ ] Chave da aplicação gerada (`php artisan key:generate`)
- [ ] Migrations base (users, cache, jobs, failed_jobs) executadas com sucesso
- [ ] Pacotes `uspdev/replicado`, `uspdev/senhaunica-socialite`, `spatie/laravel-permission` instalados via Composer
- [ ] Configurações/Migrations dos pacotes publicados (se necessário)
------
TITLE: [AUTH] Implementar Controller e Callback Senha Única2
TYPE: feature
LABELS: autenticacao,senha-unica,feature,todo
ASSIGNEE: @me
PROJECT: laravel_12_starter_kit # Substitua pelo nome/número real do seu projeto
FEATURE_MOTIVATION: Processar a autenticação do usuário via Senha Única e logá-lo no sistema.
FEATURE_DESCRIPTION: Criar um `SocialiteController` (ou similar). Implementar o método de redirecionamento (`redirectToProvider`) que chama `Socialite::driver('senhaunica')->redirect()`. Implementar o método de callback (`handleProviderCallback`) que obtém os dados do usuário via `Socialite::driver('senhaunica')->user()`, encontra ou cria o usuário local correspondente (usando `codpes` como chave principal), e loga o usuário no sistema (`Auth::login`). Tratar possíveis erros do Socialite.
PROPOSED_SOLUTION: Usar o Trait `HasSenhaunica` no model User para facilitar a busca/criação. Redirecionar para o dashboard após login bem-sucedido e para a tela de login com erro em caso de falha.
ACCEPTANCE_CRITERIA:
- [ ] Método `redirectToProvider` redireciona corretamente para a Senha Única
- [ ] Método `handleProviderCallback` obtém dados do usuário da Senha Única
- [ ] Usuário USP é encontrado ou criado no banco de dados local baseado no `codpes`
- [ ] Usuário é logado com sucesso via `Auth::login()` após callback
- [ ] Erros do Socialite são capturados e tratados (ex: redirecionamento com mensagem de erro)
- [ ] Teste de feature cobre o fluxo de login Senha Única (usando `FakeSenhaUnicaSocialiteProvider`)
TITLE: [TEST][AUTH] Implementar Testes para Login UI (#20)
TYPE: test
LABELS: test,autenticacao,phpunit,dusk,ci,todo
ASSIGNEE: @me
PROJECT: laravel_12_starter_kit
MILESTONE: v0.1.0: Autenticação Dupla (Senha Única + Local)
PARENT_ISSUE: #20
TEST_MOTIVATION: Garantir que a interface de login local (criada na Issue #20, AC10) e a integração com o botão da Senha Única funcionem conforme esperado, sejam responsivas e não quebrem com futuras alterações no layout ou lógica. Validar os critérios visuais e funcionais definidos no AC10 da issue pai.
TEST_SCOPE:
- Testes de Feature (PHPUnit) para a lógica do componente Livewire `login.blade.php` (validação, autenticação bem/malsucedida).
- Testes de Browser (Dusk) para a renderização correta da UI em `/login/local`, interação com os campos, botões (incluindo SU) e links ('Esqueci Senha', 'Registrar').
- Verificação da configuração da CI para rodar ambos os tipos de teste (PHPUnit e Dusk).
TEST_APPROACH:
- Usar factories para criar usuários de teste.
- Mockar/Faker a resposta do Socialite para o botão Senha Única no teste PHPUnit.
- No Dusk, focar na presença/visibilidade dos elementos e nas transições de página/estado após interações.
- Utilizar seletores Dusk estáveis.
ACCEPTANCE_CRITERIA:
- [ ] AC1: Laravel Dusk instalado e configurado (`php artisan dusk:install`, `.env.dusk.local` ok).
- [ ] AC2: Teste PHPUnit: Login local bem-sucedido autentica e redireciona.
- [ ] AC3: Teste PHPUnit: Falha de login local (validação campos) retorna erros corretos.
- [ ] AC4: Teste PHPUnit: Falha de login local (credenciais erradas) retorna erro 'auth.failed'.
- [ ] AC5: Teste PHPUnit: Clique (simulado) no botão SU aciona a rota `login`.
- [ ] AC6: Teste Dusk: Página `/login/local` renderiza logos, campos, links e botões corretamente.
- [ ] AC7: Teste Dusk: Preencher e submeter form de login local com sucesso redireciona para `/dashboard`.
- [ ] AC8: Teste Dusk: Preencher e submeter form de login local com falha exibe erro na página.
- [ ] AC9: Teste Dusk: Clicar no botão "Senha Única USP" inicia redirecionamento (verifica mudança de URL ou ausência de erro JS).
- [ ] AC10: Teste Dusk: Clicar no link "Esqueci minha senha?" vai para `/forgot-password`.
- [ ] AC11: Teste Dusk: Clicar no link "Register" vai para `/register`.
- [ ] AC12: Workflow `.github/workflows/laravel.yml` existe.
- [ ] AC13: Workflow executa `php artisan test` com sucesso.
- [ ] AC14: Workflow executa `php artisan dusk` com sucesso (incluindo setup do ChromeDriver).
- [ ] AC15: Workflow é disparado em `push` e `pull_request` para `main`.
- [ ] AC16: Código dos testes formatado com `./vendor/bin/pint`.
- [ ] AC17: Código dos testes passa na análise `./vendor/bin/phpstan analyse`.
- [ ] AC18: README atualizado com instruções para rodar testes Dusk (se necessário).
------