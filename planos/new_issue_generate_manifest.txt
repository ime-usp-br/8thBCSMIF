TITLE: [DevTools][Feature] Criar script Python para gerar manifesto JSON do projeto
TYPE: feature
LABELS: devtools,python,automation,feature,todo,manifest
ASSIGNEE: @me
PROJECT: Laravel 12 Starter Kit
MILESTONE:
FEATURE_MOTIVATION: A geração manual de contexto para LLMs é propensa a erros, omissões e demorada. Este script automatiza a criação de um manifesto JSON estruturado do projeto, fornecendo uma visão abrangente e atualizada de seus componentes (código fonte, arquivos de configuração, documentação, templates, dependências, contexto LLM coletado anteriormente). Isso reduz a necessidade de contexto manual extenso, facilita análises de dependências básicas entre arquivos PHP, permite o rastreamento de mudanças através de hashes de conteúdo e a contagem de tokens via API, otimizando a interação com LLMs e a compreensão geral do projeto.
FEATURE_DESCRIPTION: Criar um script Python chamado `generate_manifest.py` que irá varrer o diretório do projeto e gerar um arquivo JSON contendo um manifesto de todos os arquivos relevantes e seus metadados.
O script **DEVE**:
1.  Aceitar argumentos de linha de comando:
    *   `--output` (ou `-o`): Caminho para o arquivo JSON de saída (obrigatório).
    *   `--ignore` (ou `-i`): Padrão (glob pattern), diretório ou arquivo a ser ignorado além das exclusões padrão. Pode ser especificado múltiplas vezes.
2.  Varrer recursivamente o diretório raiz do projeto onde o script é executado.
3.  Identificar arquivos relevantes, incluindo, mas não limitado a:
    *   Código fonte: `.php`, `.js`, `.py`, `.sh`.
    *   Views: `.blade.php`.
    *   Configuração: `.json`, `.yaml`, `.yml`, arquivos em `config/`.
    *   Banco de Dados: Arquivos de migration em `database/migrations/`.
    *   Testes: Arquivos em `tests/` (`_test.php`, `.php`).
    *   Documentação: Arquivos `.md` na raiz do projeto e no diretório `/docs`.
    *   Templates: Arquivos em `templates/`.
    *   Arquivos de Dependência: `composer.json`, `package.json`.
    *   Arquivos de Ambiente: `.env*` (ex: `.env`, `.env.example`, `.env.testing`).
4.  **Inclusão Obrigatória Específica:**
    *   Incluir **todos** os arquivos `.php` dentro de `vendor/uspdev/replicado/src/`.
    *   Incluir **todos** os arquivos `.php` dentro de `vendor/uspdev/senhaunica-socialite/src/`.
    *   Incluir **todos** os arquivos dentro de `context_llm/common/`.
    *   Identificar o subdiretório mais recente (baseado no nome em formato YYYYMMDD_HHMMSS) dentro de `context_llm/code/` e incluir **todos** os arquivos dentro dele. Ignorar diretórios mais antigos em `context_llm/code/`.
5.  **Exclusão Padrão:**
    *   Ignorar **explicitamente** os seguintes diretórios e padrões (além dos especificados via `--ignore`): `vendor/` (exceto os subdiretórios `uspdev/.../src/` mencionados acima), `node_modules/`, `storage/logs/`, `storage/framework/cache/data/`, `storage/framework/views/`, `public/build/`, `.git/`, `.idea/`, `.vscode/`, `llm_outputs/`, `.phpunit.cache/`, e o próprio diretório `context_llm/` (exceto os subdiretórios `common/` e o último de `code/`).
    *   Ignorar o próprio arquivo JSON de saída especificado em `--output`.
6.  Para cada arquivo identificado e **não excluído**:
    *   Gerar um objeto JSON com as seguintes chaves:
        *   `path`: (String) Caminho relativo do arquivo a partir da raiz do projeto.
        *   `type`: (String) Uma string descritiva categorizando o arquivo. Exemplos: `code_php_controller`, `code_php_model`, `code_php_service`, `code_php_command`, `code_php_middleware`, `code_php_request`, `code_php_livewire`, `code_php_factory`, `code_php_seeder`, `code_js`, `code_python`, `code_shell`, `view_blade`, `view_blade_component`, `config_laravel`, `config_json`, `config_yaml`, `migration_php`, `test_php_feature`, `test_php_unit`, `test_php_dusk`, `docs_md`, `docs_readme`, `template_meta_prompt`, `template_issue_body`, `environment_env`, `dependency_composer`, `dependency_npm`, `context_common_doc`, `context_common_config`, `context_code_git_log`, `context_code_git_diff`, `context_code_issue_details`, `context_code_artisan_output`, `context_code_env_info`, `code_php_vendor_uspdev_replicado`, `code_php_vendor_uspdev_senhaunica`. A categorização deve ser o mais específica possível.
        *   `versioned`: (Boolean) `true` se o arquivo for rastreado pelo Git (verificar via `git ls-files --error-unmatch <path>`), `false` caso contrário. **Obrigatoriamente `false`** para arquivos dentro dos diretórios `vendor/uspdev/replicado/src/`, `vendor/uspdev/senhaunica-socialite/src/`, `context_llm/common/` e o diretório mais recente de `context_llm/code/`.
        *   `hash`: (String|Null) O hash SHA1 do conteúdo do arquivo. **NÃO DEVE** ser gerado (ou deve ser `null`) para arquivos cujo `type` seja `environment_env`. **PODE** ser `null` ou a chave pode ser omitida para arquivos dentro do diretório `context_llm/code/*`.
        *   `token_count`: (Integer | Null) A contagem de tokens do conteúdo do arquivo, obtida via `google.genai.count_tokens` (usando um modelo como `gemini-1.5-flash`). Será `null` para: arquivos binários detectados, arquivos `.env*`, arquivos de contexto gerados (`context_llm/code/*`), e em caso de erro na leitura do arquivo ou falha na chamada da API `count_tokens`. A contagem só deve ser recalculada para arquivos de texto novos ou modificados (hash diferente do manifesto anterior).
        *   `dependencies`: (Array<String>) Um array de strings representando dependências inferidas. Para arquivos PHP (todos, incluindo os de `vendor/uspdev/`), deve conter os nomes completos das classes/namespaces extraídos das declarações `use`. Para outros tipos de arquivo, deve ser um array vazio (`[]`).
        *   `dependents`: (Array<String>) Um array de strings. Inicialmente, deve ser sempre um array vazio (`[]`).
        *   `summary`: (String) Um resumo textual do arquivo.
            *   Para tipos `docs_*`, `template_*`, `config_*`, `dependency_*`, `context_common_*`: Um resumo curto, como as primeiras 1-3 linhas do arquivo ou uma descrição baseada no nome/tipo (ex: "Arquivo de configuração principal do Laravel", "Template para corpo de issue de bug").
            *   Para tipos `context_code_*`: Uma descrição clara do que o arquivo representa (ex: "Saída do comando `git log --pretty=format...`", "Diff das mudanças em stage (`git diff --cached`)", "Detalhes completos da Issue #XX do GitHub em JSON", "Informações sobre o ambiente PHP (`php -v`, `php -m`)") e sua principal utilidade para LLMs (ex: "Útil para análise de histórico e geração de mensagens de commit", "Essencial para gerar código relativo às mudanças atuais", "Fundamental para entender os requisitos da Issue #XX", "Importante para diagnóstico de compatibilidade").
7.  O resultado final **DEVE** ser um único array JSON contendo os objetos de todos os arquivos incluídos, escrito no arquivo especificado pelo argumento `--output`.
PROPOSED_SOLUTION:
- Utilizar Python 3.10 ou superior.
- Usar bibliotecas padrão: `pathlib` para manipulação de caminhos e arquivos, `subprocess` para executar comandos `git`, `hashlib` para gerar hashes SHA1, `json` para formatar a saída, e `re` para extrair `use` statements de arquivos PHP.
- **Importar `google.genai` e tratar dependência de API Key:**
    - O script precisará importar a biblioteca `google.genai`.
    - Deverá carregar a `GEMINI_API_KEY` de uma variável de ambiente ou arquivo `.env` (reutilizar lógica de `llm_interact.py` se possível ou documentar a necessidade da variável).
    - Inicializar o cliente `genai.Client(api_key=...)`.
    - Instanciar um modelo generativo, por exemplo `model = genai.GenerativeModel('gemini-1.5-flash')` ou similar apropriado para contagem de tokens.
- Obter a lista inicial de arquivos versionados e verificar o status de versionamento de arquivos específicos usando `subprocess.run(['git', 'ls-files', '--error-unmatch', str(filepath)], ...)` e verificando o código de retorno.
- Implementar lógica de varredura de diretórios usando `Path.rglob('*')`.
- Aplicar filtros explícitos para as regras de inclusão e exclusão de diretórios/arquivos/padrões. Usar `Path.match()` para padrões glob.
- Criar um mapeamento (ex: dicionário) de extensões de arquivo e caminhos específicos para determinar o valor do campo `type`.
- Implementar lógica condicional para a geração do campo `hash`, pulando arquivos `.env*` e potencialmente os de `context_llm/code/`.
- **Implementar contagem de tokens (`token_count`):**
    - Criar uma função auxiliar (ex: `count_tokens_for_file(filepath: Path, model) -> Optional[int]`).
    - Dentro da função:
        - Ler o conteúdo do arquivo (`filepath.read_text(encoding='utf-8', errors='ignore')`). Tratar `IOError` e retornar `None`.
        - Chamar `model.count_tokens(file_content)` dentro de um bloco `try...except` para capturar erros da API (`google.generativeai.errors.*`, `google.api_core.exceptions.*`). Em caso de erro, logar e retornar `None`.
        - Retornar `response.total_tokens` se a chamada for bem-sucedida.
    - **Lógica Incremental:** No loop principal de processamento de arquivos:
        - Verificar se o arquivo já existe no manifesto anterior (`previous_manifest_files_data`).
        - Se existir e o `hash` atual for igual ao `hash` anterior (e o `token_count` anterior não era `None`), reutilizar o valor de `token_count` do manifesto anterior.
        - Caso contrário (arquivo novo, hash modificado, ou `token_count` anterior era `None`), e **se o arquivo for de texto** (não binário, não `.env*`, não de `context_llm/code/*`), chamar a função `count_tokens_for_file`.
        - Armazenar o resultado (inteiro ou `None`) no campo `token_count` do metadado atual.
        - Definir `token_count` como `None` para arquivos binários, `.env*` e de contexto gerado (`context_llm/code/*`), ou se a função auxiliar retornar `None` devido a erro de leitura ou API.
- Usar expressões regulares (`re.findall(r'^\s*use\s+([a-zA-Z0-9_\\]+);', content, re.MULTILINE)`) para extrair os nomes completos das classes/namespaces dos `use` statements em arquivos PHP.
- Implementar lógica condicional para gerar o campo `summary` com base no `type` e localização do arquivo, com tratamento especial para os arquivos em `context_llm/code/`.
- Formatar a lista final de objetos de arquivo em um array JSON e escrevê-lo no arquivo de saída.
- Incluir tratamento básico de exceções (ex: `FileNotFoundError`, `PermissionError`, erros da API `google.genai`).
ACCEPTANCE_CRITERIA:
- [x] AC1: Script `scripts/generate_manifest.py` existe em `scripts/` e é executável.
- [x] AC2: Argumentos `--output` (opcional), `--ignore`, `--verbose`, `--help` funcionam conforme descrito. O padrão de saída é `scripts/data/YYYYMMDD_HHMMSS_manifest.json`.
- [x] AC3: Script lê corretamente o manifesto anterior mais recente (formato `YYYYMMDD_HHMMSS_manifest.json`) de `scripts/data/` para atualização incremental, se existir.
- [x] AC4: Varrredura de arquivos prioriza `git ls-files` e inclui scans adicionais necessários (context_llm, vendor/uspdev).
- [x] AC5: Regras de exclusão (padrão e `--ignore`) são aplicadas corretamente.
- [x] AC6: Arquivos binários (detectados via extensão+bytes) são incluídos no manifesto, mas com `hash: null` e `summary: null`.
- [x] AC7: O JSON de saída é um **dicionário** válido, onde as chaves são os paths relativos dos arquivos. # Mantido como no contexto original #32 AC7
- [ ] AC8: Metadado `type` é granular e correto para diferentes tipos de arquivos (PHP, Blade, Config, Docs, Contexto Gerado, Vendor USP, etc.). # Mantido como no contexto original #32 AC8
- [ ] AC9: Metadado `versioned` é `true` se o arquivo estiver na lista de `git ls-files`, `false` caso contrário (ou para `vendor/uspdev`, `context_llm/*`).
- [ ] AC10: Metadado `hash` contém o SHA1 do conteúdo do arquivo.
- [ ] AC11: Metadado `hash` é `null` para arquivos `.env*`, arquivos de contexto gerados (identificados por path `context_llm/code/*`), binários (AC6), e em caso de erro de leitura/hash.
- [ ] AC12: Objeto JSON para cada arquivo contém a chave `token_count` com valor `Integer` ou `null`.
- [ ] AC13: `token_count` é um `Integer` para arquivos de texto contados com sucesso pela API `google.genai.count_tokens` (usando `gemini-1.5-flash` ou similar).
- [ ] AC14: `token_count` é `null` para arquivos binários, arquivos `.env*`, arquivos em `context_llm/code/*`, arquivos com erro de leitura, ou em caso de falha na API `count_tokens`.
- [ ] AC15: A API `google.genai.count_tokens` é utilizada para obter a contagem de tokens.
- [ ] AC16: A contagem de tokens (`token_count`) só é recalculada via API para arquivos de texto novos ou cujo `hash` mudou em relação ao manifesto anterior; caso contrário, o valor anterior é reutilizado.
- [ ] AC17: A variável de ambiente `GEMINI_API_KEY` é carregada e utilizada para autenticar a chamada `count_tokens`.
- [ ] AC18: Tratamento básico de erro para a API `count_tokens` (`google.genai.errors`, `google.api_core.exceptions`) está implementado (resultando em `token_count: null`).
- [ ] AC19: Objeto JSON contém a chave `dependencies` como um array de strings.
- [ ] AC20: Para arquivos PHP (incluindo `vendor/uspdev`), `dependencies` contém nomes completos de classes/namespaces dos `use` statements.
- [ ] AC21: Para outros tipos de arquivo, `dependencies` é `[]`.
- [ ] AC22: Objeto JSON contém a chave `dependents` como um array vazio (`[]`).
- [ ] AC23: Objeto JSON contém a chave `summary` como uma string.
- [ ] AC24: Para `docs_*`, `template_*`, `config_*`, `dependency_*`, `context_common_*`, o `summary` é um resumo curto e relevante (ex: primeiras linhas ou descrição baseada no tipo/nome).
- [ ] AC25: Para `context_code_*`, o `summary` descreve claramente o conteúdo (ex: "Saída do comando git log") e sua utilidade para LLMs (ex: "Útil para gerar mensagens de commit").
- [ ] AC26: O arquivo JSON de saída é válido e contém um único array JSON com os objetos de todos os arquivos incluídos.
- [ ] AC27: Script trata erros básicos (ex: diretório de saída não gravável, erro ao rodar git, erro de leitura de arquivo) e exibe mensagens informativas no `stderr`.
- [ ] AC28: Código Python do script adere às convenções básicas do PEP 8.