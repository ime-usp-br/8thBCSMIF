**Sua Tarefa ÚNICA e ABSOLUTAMENTE RESTRITA:**
Crie **EXCLUSIVAMENTE** o texto de um **prompt final**. Este prompt final instruirá uma IA (a "IA Final") a gerar o **texto completo (formato Markdown)** para uma nova sub-issue do GitHub. Esta sub-issue será um desdobramento conceitual do Critério de Aceite (AC) `__PARENT_AC_NUMBER__` (se fornecido) da Issue `__PARENT_ISSUE_NUMBER__` e deve focar **exclusivamente** na implementação de testes abrangentes (Unitários, Feature PHPUnit, Browser Dusk) e automação CI para a funcionalidade descrita na Issue pai, utilizando como base este meta-prompt e os arquivos de contexto anexados. **NÃO** inclua **NADA** além do texto puro e exato deste prompt final. **ZERO** introduções, **ZERO** explicações, **ZERO** comentários pré ou pós-prompt. Sua saída deve começar **IMEDIATAMENTE** com a primeira palavra do prompt final e terminar **IMEDIATAMENTE** com a última palavra dele. Qualquer caractere fora do texto do prompt final é **ESTRITAMENTE PROIBIDO**.

**Instruções para a Construção do Prompt Final (QUE VOCÊ DEVE GERAR E NADA MAIS):**

O prompt final que você gerar **DEVE** comandar **explicitamente** a IA Final a seguir **OBRIGATORIAMENTE E SEM EXCEÇÕES** as seguintes diretrizes ao gerar o texto da sub-issue:

1.  **Objetivo Principal:** Instrua a IA Final a gerar o texto completo em Markdown para uma **nova sub-issue do GitHub**. O foco desta sub-issue é a **implementação de testes Unitários (se aplicável), Feature (PHPUnit) e Browser (Dusk), além da configuração/validação da automação via GitHub Actions**, para a funcionalidade da Issue pai `#__PARENT_ISSUE_NUMBER__`. A sub-issue deriva conceitualmente do AC `__PARENT_AC_NUMBER__` da issue pai (se este foi fornecido como contexto a você, o gerador do prompt final).

2.  **Análise Mandatória do Contexto:** Exija que a IA Final analise **TODOS** os arquivos de contexto anexados (especialmente `github_issue___PARENT_ISSUE_NUMBER___details.json`, `tests/Feature/*`, `tests/Unit/*`, `.github/workflows/laravel.yml`, `docs/guia_de_desenvolvimento.md`, `docs/padroes_codigo_boas_praticas.md` e o código relevante da issue pai inferido dos diffs/logs) para entender completamente:
    *   A funcionalidade exata implementada na Issue pai `#__PARENT_ISSUE_NUMBER__`.
    *   A estrutura e estilo dos testes existentes no projeto.
    *   A configuração atual (ou ausência) do Laravel Dusk.
    *   O workflow CI/CD existente.
    *   Os padrões de escrita de Issues e ACs do projeto.

3.  **Geração do Conteúdo da Sub-Issue (Markdown):**
    *   **Título:** Instrua a IA Final a gerar um título claro e conciso, indicando que é uma sub-issue de teste e referenciando a issue pai. Sugira um padrão como: `[TEST][Módulo] Implementar Testes para [Funcionalidade Breve] (#__PARENT_ISSUE_NUMBER__)` onde `Módulo` e `Funcionalidade Breve` são **deduzidos** do contexto da issue pai.
    *   **Tipo (Implícito para Template):** A IA Final deve formatar a saída para ser usada com o template `feature_body.md` ou um template `test_body.md` se existir, preenchendo as seções relevantes para uma *tarefa de teste*.
    *   **Labels Sugeridas:** Instrua a IA Final a sugerir labels relevantes, como `test`, `phpunit`, `dusk`, `ci`, `todo`, e potencialmente um label de módulo (ex: `autenticacao`) **deduzido** do contexto da issue pai.
    *   **Assignee:** Sugerir `@me`.
    *   **Motivation/Context:** A IA Final deve gerar um texto explicando a importância de testes robustos para a funcionalidade da Issue `#__PARENT_ISSUE_NUMBER__` (e AC `__PARENT_AC_NUMBER__`, se aplicável), garantindo qualidade e prevenindo regressões.
    *   **Description:** A IA Final deve descrever o escopo do trabalho: configurar Dusk (se necessário), criar testes PHPUnit/Feature, criar testes Dusk e configurar/validar a CI.
    *   **Proposed Solution (Opcional):** A IA Final **PODE** sugerir abordagens específicas para os testes (ex: nomes de classes de teste, principais interações a cobrir no Dusk) baseadas na análise da issue pai.
    *   **Critérios de Aceite (ESSENCIAL E DETALHADO):** Este é o foco principal. O prompt final **DEVE** instruir a IA Final a gerar uma lista **detalhada e verificável** de ACs, cobrindo as **categorias padrão** de testes para o projeto, adaptando-os à funcionalidade específica da Issue pai `#__PARENT_ISSUE_NUMBER__`. As categorias a serem cobertas **OBRIGATORIAMENTE** são:
        *   **Configuração:** (Se aplicável, ex: instalação/configuração do Dusk se ainda não estiver pronto ou se a issue pai introduzir algo que demande configuração específica para testes).
        *   **Testes Unitários (PHPUnit):** (Se a issue pai envolveu lógica complexa em Services, Actions, Models, etc., que possa ser testada isoladamente). A IA **DEVE** identificar e propor ACs para testar essa lógica específica. Se não houver lógica unitária clara, este AC pode ser mínimo ou indicar "Não aplicável".
        *   **Testes de Feature (PHPUnit):** (Para testar a funcionalidade do ponto de vista do backend/HTTP/componente Livewire - rotas, controllers, validação, lógica do componente, interações com o banco de dados simulado). A IA **DEVE** gerar ACs específicos para os endpoints/ações/componentes relevantes da issue pai.
        *   **Testes de Browser (Dusk):** (Para testar a interface do usuário e interações no navegador). A IA **DEVE** gerar ACs detalhados para:
            *   Verificar a correta renderização dos elementos de UI introduzidos/modificados pela issue pai.
            *   Simular as interações do usuário relevantes para a funcionalidade da issue pai.
            *   Verificar os resultados esperados na UI (mensagens, redirecionamentos parciais, atualizações de estado).
        *   **Automação CI (GitHub Actions):**
            *   Garantir que um workflow CI exista e esteja configurado (`AC: Workflow CI existe`).
            *   Garantir que os testes PHPUnit sejam executados nesse workflow (`AC: Workflow executa php artisan test`).
            *   Garantir que os testes Dusk sejam executados nesse workflow (incluindo setup do ChromeDriver/Browser) (`AC: Workflow executa php artisan dusk`).
            *   Garantir que o workflow seja disparado nos eventos apropriados (`push`, `pull_request`) (`AC: Workflow é disparado em push/pull_request`).
        *   **Qualidade:**
            *   Exigir que o código dos testes siga os padrões PSR-12/Pint (`AC: Código de teste formatado com Pint`).
            *   Exigir que o código dos testes passe na análise estática do Larastan (`AC: Código de teste passa no Larastan`).
            *   Exigir que a documentação do projeto (README, guias) seja atualizada se a nova configuração de testes impactar a forma como outros desenvolvedores devem rodar/entender os testes (`AC: Documentação atualizada (se necessário)`).

4.  **Baseado no Contexto:** Reafirme que a IA Final **DEVE** basear a estrutura e o conteúdo da sub-issue **UNICAMENTE** nas informações contidas nos arquivos de contexto fornecidos e nas regras documentadas.

5.  **SAÍDA FINAL EXTREMAMENTE RESTRITA (REFORÇO MÁXIMO):** O prompt final **DEVE ORDENAR CATEGORICAMENTE** à IA Final que sua resposta contenha **APENAS E SOMENTE APENAS** o texto completo em Markdown da sub-issue. **NENHUMA PALAVRA, CARACTERE OU QUEBRA DE LINHA ADICIONAL FORA DO TEXTO DA ISSUE.** Nenhuma saudação, nenhuma explicação, nenhuma meta-observação, **NADA** além do Markdown puro e completo da sub-issue.

**REPETINDO SUA TAREFA:** Sua saída deve ser **APENAS** o texto do prompt final que instruirá a IA Final a gerar o texto Markdown da sub-issue de testes genérica, adaptada à Issue Pai `__PARENT_ISSUE_NUMBER__` (e opcionalmente ao AC `__PARENT_AC_NUMBER__`), seguindo as diretrizes detalhadas acima. Comece a resposta diretamente com a primeira palavra do prompt final. Termine imediatamente após a última palavra. **NÃO ESCREVA MAIS NADA.**