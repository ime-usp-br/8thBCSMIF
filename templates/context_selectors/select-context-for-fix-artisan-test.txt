**Sua Tarefa ÚNICA e ABSOLUTAMENTE RESTRITA:**
Com base na descrição da tarefa principal, no conteúdo essencial pré-injetado e no manifesto JSON dos demais arquivos fornecido, selecione os arquivos **ADICIONAIS MAIS RELEVANTES** do manifesto JSON que, *juntamente com o conteúdo essencial já fornecido*, fornecerão o contexto ótimo para a IA realizar a tarefa principal. Sua seleção deve priorizar os arquivos mais críticos primeiro e, em seguida, adicionar arquivos relevantes adicionais para utilizar o máximo possível do limite de tokens do manifesto (aproximadamente 200k tokens), mantendo a relevância.

**Tarefa Principal:** Analisar a saída do comando `php artisan test` (contida em `phpunit_test_results.txt`), identificar os testes que falharam, determinar se o erro está no código do teste ou no código da aplicação referenciado, e gerar o código PHP corrigido para o(s) arquivo(s) apropriado(s).

**Contexto Fornecido:**
Você receberá:
1.  O conteúdo integral de arquivos "essenciais" para a tarefa, pré-injetados diretamente abaixo.
2.  Um manifesto JSON (aninhado sob a chave `files`) contendo sumários e metadados de *outros* arquivos do projeto.

**Conteúdo Essencial Pré-Injetado:**
{{ESSENTIAL_FILES_CONTENT}}

**Manifesto JSON dos Demais Arquivos:**
```json
{{REMAINING_MANIFEST_JSON}}
```

**Seu Processo de Seleção (COM PRIORIZAÇÃO E USO DE TOKEN):**
1.  Entenda profundamente o objetivo da **Tarefa Principal**: corrigir falhas reportadas em `phpunit_test_results.txt`.
2.  Analise o **Conteúdo Essencial Pré-Injetado** E os metadados/sumários de CADA arquivo no **Manifesto JSON dos Demais Arquivos**.
3.  **ORDEM DE PRIORIDADE PARA SELEÇÃO (a partir do Manifesto JSON dos Demais Arquivos):**
    *   **NÍVEL 1 (CRÍTICOS - INCLUIR SEMPRE, SE NÃO ESTIVEREM NOS ESSENCIAIS):**
        *   O resultado da execução dos testes (`phpunit_test_results.txt`) - *se não foi pré-injetado*.
        *   Os arquivos de teste (`tests/...Test.php`) específicos que são mencionados como falhos no `phpunit_test_results.txt` - *se não foram pré-injetados*.
    *   **NÍVEL 2 (ALTAMENTE RELEVANTES - INCLUIR SE O ORÇAMENTO DE TOKENS PERMITIR):**
        *   Os arquivos de código da aplicação (`app/...`) que são diretamente mencionados nas mensagens de erro ou stack traces dentro do `phpunit_test_results.txt`.
        *   Os guias de desenvolvimento (`guia_de_desenvolvimento.md`, `padroes_codigos_boas_praticas.md`) que definem os padrões de código e teste.
    *   **NÍVEL 3 (CONTEXTUAIS - INCLUIR SE O ORÇAMENTO DE TOKENS AINDA PERMITIR):**
        *   Outros arquivos PHP (Models, Services, Traits, Interfaces) que são dependências diretas do código que falhou (seja no teste ou na aplicação), para que a IA compreenda tipos e assinaturas. Use o `summary` para avaliar a relevância.
4.  **GESTÃO DE TOKENS:** Ao adicionar arquivos do Nível 2 e 3, priorize aqueles com `summary` mais informativo e tente preencher o máximo possível do limite de tokens.
5.  **EXCLUA ESTRITAMENTE:**
    *   **Qualquer arquivo de template de prompt** (ex: `templates/prompts/*`, `templates/meta-prompts/*`, `templates/context_selectors/*`).
    *   Arquivos de teste que passaram, diffs de Git, logs de commit, detalhes de issues (a menos que diretamente relacionado ao erro), arquivos de configuração não relevantes, dependências, views Blade, assets, e outros arquivos de contexto não diretamente necessários para *diagnosticar e corrigir as falhas específicas* reportadas nos testes.
    *   **NÃO** inclua arquivos que já foram fornecidos no **Conteúdo Essencial Pré-Injetado**.

**Formato de Saída OBRIGATÓRIO E ESTRITO:**
Sua resposta DEVE ser **APENAS E SOMENTE APENAS** um objeto JSON válido contendo UMA ÚNICA chave chamada `relevant_files`. O valor desta chave DEVE ser uma LISTA (array JSON) de strings, onde cada string é o caminho relativo EXATO de um arquivo selecionado do **Manifesto JSON dos Demais Arquivos**, **ordenada pela prioridade de inclusão (Nível 1 primeiro, depois Nível 2, etc.)**.

**Exemplo de Saída:**
```json
{
  "relevant_files": [
    "app/Http/Controllers/Auth/LoginController.php",
    "docs/padroes_codigo_boas_praticas.md"
  ]
}
```

**REGRAS ADICIONAIS:**
-   **NÃO** inclua NENHUM texto explicativo, introdução, saudação ou qualquer outra coisa fora do objeto JSON.
-   Sua resposta completa DEVE começar com `{` e terminar com `}`.
-   Se NENHUM arquivo *adicional* do manifesto JSON for considerado relevante, retorne `{"relevant_files": []}`.