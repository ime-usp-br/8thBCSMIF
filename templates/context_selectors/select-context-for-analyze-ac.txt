**Sua Tarefa ÚNICA e ABSOLUTAMENTE RESTRITA:**
Com base na descrição da tarefa principal, no conteúdo essencial pré-injetado e no manifesto JSON dos demais arquivos fornecido, selecione os arquivos **ADICIONAIS MAIS RELEVANTES** do manifesto JSON que, *juntamente com o conteúdo essencial já fornecido*, fornecerão o contexto ótimo para a IA realizar a tarefa principal. Sua seleção deve priorizar os arquivos mais críticos primeiro e, em seguida, adicionar arquivos relevantes adicionais para utilizar o máximo possível do limite de tokens do manifesto (aproximadamente 200k tokens), mantendo a relevância.

**Tarefa Principal:** Analisar o Critério de Aceite (AC) número `__NUMERO_DO_AC__` da Issue GitHub `__NUMERO_DA_ISSUE__` para determinar se ele foi atendido, gerando uma mensagem de conclusão para o GitHub. A análise deve considerar o código implementado, os padrões do projeto e o histórico de análises anteriores.

**Contexto Fornecido:**
Você receberá:
1.  O conteúdo integral de arquivos "essenciais" para a tarefa, pré-injetados diretamente abaixo.
2.  Um manifesto JSON (aninhado sob a chave `files`) contendo sumários e metadados de *outros* arquivos do projeto.

**Conteúdo Essencial Pré-Injetado:**
{{ESSENTIAL_FILES_CONTENT}}

**Manifesto JSON dos Demais Arquivos:**
```json
{{REMAINING_MANIFEST_JSON}}
```

**Seu Processo de Seleção (COM PRIORIZAÇÃO E USO DE TOKEN):**
1.  Entenda profundamente o objetivo da **Tarefa Principal**: avaliar o AC `__NUMERO_DO_AC__` da Issue `__NUMERO_DA_ISSUE__`.
2.  Analise o **Conteúdo Essencial Pré-Injetado** E os metadados/sumários de CADA arquivo no **Manifesto JSON dos Demais Arquivos**.
3.  **ORDEM DE PRIORIDADE PARA SELEÇÃO (a partir do Manifesto JSON dos Demais Arquivos):**
    *   **NÍVEL 1 (CRÍTICOS - INCLUIR SEMPRE, SE NÃO ESTIVEREM NOS ESSENCIAIS):**
        *   Os detalhes completos da Issue `__NUMERO_DA_ISSUE__` (`github_issue___NUMERO_DA_ISSUE___details.json`) - *se não foi pré-injetado*.
        *   Os arquivos de código fonte (Models, Controllers, Views Blade/Livewire, Services, Rotas, etc.) que foram **diretamente modificados ou criados** para implementar o AC `__NUMERO_DO_AC__` - *se não foram pré-injetados*. Use o `summary` e `type` para identificar, e considere os diffs (`git_diff_*`) se disponíveis no manifesto.
        *   Os arquivos de teste (`tests/Feature/*`, `tests/Unit/*`, `tests/Browser/*`) que validam especificamente o AC `__NUMERO_DO_AC__` - *se não foram pré-injetados*.
    *   **NÍVEL 2 (ALTAMENTE RELEVANTES - INCLUIR SE O ORÇAMENTO DE TOKENS PERMITIR):**
        *   Os arquivos de documentação que definem os padrões de qualidade e desenvolvimento (`guia_de_desenvolvimento.md`, `padroes_codigos_boas_praticas.md`) - *se não foram pré-injetados*.
        *   Outros arquivos `github_issue_*_details.json` que contenham **exemplos de análises de ACs anteriores**, para referência de estilo e formato.
        *   Arquivos de código que são dependências diretas ou interfaces dos arquivos modificados no Nível 1 (ou dos essenciais pré-injetados).
    *   **NÍVEL 3 (CONTEXTUAIS - INCLUIR SE O ORÇAMENTO DE TOKENS AINDA PERMITIR):**
        *   Arquivos de configuração (`config/*.php`) diretamente impactados ou consultados pela funcionalidade do AC.
        *   Resultados de testes recentes (`phpunit_test_results.txt`, `dusk_test_results.txt`) se indicarem o status da funcionalidade do AC - *se não foram pré-injetados*.
4.  **GESTÃO DE TOKENS:** Ao adicionar arquivos do Nível 2 e 3, priorize aqueles com `summary` mais informativo e tente preencher o máximo possível do limite de tokens.
5.  **EXCLUA ESTRITAMENTE:**
    *   **Qualquer arquivo de template de prompt** (ex: `templates/prompts/*`, `templates/meta-prompts/*`, `templates/context_selectors/*`).
    *   Arquivos genéricos de dependências (composer.json, package.json), a menos que o AC seja sobre eles.
    *   Logs genéricos do sistema (`laravel.log`, etc.).
    *   Arquivos de contexto não diretamente relacionados à validação específica do AC `__NUMERO_DO_AC__` ou ao estilo de análise.
    *   **NÃO** inclua arquivos que já foram fornecidos no **Conteúdo Essencial Pré-Injetado**.

**Formato de Saída OBRIGATÓRIO E ESTRITO:**
Sua resposta DEVE ser **APENAS E SOMENTE APENAS** um objeto JSON válido contendo UMA ÚNICA chave chamada `relevant_files`. O valor desta chave DEVE ser uma LISTA (array JSON) de strings, onde cada string é o caminho relativo EXATO de um arquivo selecionado do **Manifesto JSON dos Demais Arquivos**, **ordenada pela prioridade de inclusão (Nível 1 primeiro, depois Nível 2, etc.)**.

**Exemplo de Saída:**
```json
{
  "relevant_files": [
    "app/Http/Controllers/AnotherController.php",
    "tests/Unit/AnotherTest.php",
    "context_llm/code/YYYYMMDD_HHMMSS/github_issue_PREVIOUS_details.json"
  ]
}
```

**REGRAS ADICIONAIS:**
-   **NÃO** inclua NENHUM texto explicativo, introdução, saudação ou qualquer outra coisa fora do objeto JSON.
-   Sua resposta completa DEVE começar com `{` e terminar com `}`.
-   Se NENHUM arquivo *adicional* do manifesto JSON for considerado relevante (além dos essenciais já pré-injetados), retorne `{"relevant_files": []}`.