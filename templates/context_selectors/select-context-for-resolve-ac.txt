**Sua Tarefa ÚNICA e ABSOLUTAMENTE RESTRITA:**
Com base na descrição da tarefa principal, no conteúdo essencial pré-injetado e no manifesto JSON dos demais arquivos fornecido, selecione os arquivos **ADICIONAIS MAIS RELEVANTES** do manifesto JSON que, *juntamente com o conteúdo essencial já fornecido*, fornecerão o contexto ótimo para a IA realizar a tarefa principal. Sua seleção deve priorizar os arquivos mais críticos primeiro e, em seguida, adicionar arquivos relevantes adicionais para utilizar o máximo possível do limite de tokens do manifesto (aproximadamente 200k tokens), mantendo a relevância.

**Tarefa Principal:** Gerar o código PHP/Blade/JS/CSS/SQL (incluindo testes, traduções, migrations, etc.) estritamente necessário para resolver o Critério de Aceite (AC) número `__NUMERO_DO_AC__` da Issue GitHub `__NUMERO_DA_ISSUE__`, considerando também a observação adicional `__OBSERVACAO_ADICIONAL__` e o plano geral da Issue.

**Contexto Fornecido:**
Você receberá:
1.  O conteúdo integral de arquivos "essenciais" para a tarefa, pré-injetados diretamente abaixo.
2.  Um manifesto JSON (aninhado sob a chave `files`) contendo sumários e metadados de *outros* arquivos do projeto.

**Conteúdo Essencial Pré-Injetado:**
{{ESSENTIAL_FILES_CONTENT}}

**Manifesto JSON dos Demais Arquivos:**
```json
{{REMAINING_MANIFEST_JSON}}
```

**Seu Processo de Seleção (COM PRIORIZAÇÃO E USO DE TOKEN):**
1.  Entenda profundamente o objetivo da **Tarefa Principal**: implementar o AC `__NUMERO_DO_AC__` da Issue `__NUMERO_DA_ISSUE__`, respeitando a observação `__OBSERVACAO_ADICIONAL__` e o contexto da issue inteira.
2.  Analise o **Conteúdo Essencial Pré-Injetado** E os metadados/sumários de CADA arquivo no **Manifesto JSON dos Demais Arquivos**.
3.  **ORDEM DE PRIORIDADE PARA SELEÇÃO (a partir do Manifesto JSON dos Demais Arquivos):**
    *   **NÍVEL 1 (CRÍTICOS - INCLUIR SEMPRE, SE NÃO ESTIVEREM NOS ESSENCIAIS):**
        *   Os detalhes completos da Issue `__NUMERO_DA_ISSUE__` (`github_issue___NUMERO_DA_ISSUE___details.json`) - *se não foi pré-injetado*.
        *   Os arquivos de código fonte (Models, Controllers, Views, Services, Rotas, etc.) que **precisarão ser modificados ou criados** para implementar o AC `__NUMERO_DO_AC__` - *se não foram pré-injetados*. Use o `summary` e `type` para identificar.
    *   **NÍVEL 2 (ALTAMENTE RELEVANTES - INCLUIR SE O ORÇAMENTO DE TOKENS PERMITIR):**
        *   Arquivos de código fonte **relacionados** à funcionalidade do AC (classes que serão chamadas, interfaces que serão implementadas, traits utilizados, etc.). Analise `dependencies` nos metadados.
        *   Arquivos de teste existentes (`tests/`) que cobrem áreas relacionadas ou que precisarão ser atualizados/criados.
        *   Arquivos de tradução (`lang/*.json`) se o AC envolve texto para o usuário.
        *   Os guias de desenvolvimento (`guia_de_desenvolvimento.md`, `padroes_codigos_boas_praticas.md`) que definem os padrões a serem seguidos - *se não foram pré-injetados*.
    *   **NÍVEL 3 (CONTEXTUAIS - INCLUIR SE O ORÇAMENTO DE TOKENS AINDA PERMITIR):**
        *   Arquivos de configuração (`config/*.php`) relevantes se o AC afetar a configuração.
        *   Diffs recentes (`git_diff_*`) se relevantes para entender o estado atual do código em desenvolvimento.
4.  **GESTÃO DE TOKENS:** Ao adicionar arquivos do Nível 2 e 3, priorize aqueles com `summary` mais informativo e tente preencher o máximo possível do limite de tokens.
5.  **EXCLUA ESTRITAMENTE:**
    *   **Qualquer arquivo de template de prompt** (ex: `templates/prompts/*`, `templates/meta-prompts/*`, `templates/context_selectors/*`).
    *   Código fonte não relacionado, dependências de pacotes (composer/package), logs genéricos, arquivos de contexto de outras issues, e outros arquivos não diretamente necessários para *escrever o código, testes e traduções* para este AC específico.
    *   **NÃO** inclua arquivos que já foram fornecidos no **Conteúdo Essencial Pré-Injetado**.

**Formato de Saída OBRIGATÓRIO E ESTRITO:**
Sua resposta DEVE ser **APENAS E SOMENTE APENAS** um objeto JSON válido contendo UMA ÚNICA chave chamada `relevant_files`. O valor desta chave DEVE ser uma LISTA (array JSON) de strings, onde cada string é o caminho relativo EXATO de um arquivo selecionado do **Manifesto JSON dos Demais Arquivos**, **ordenada pela prioridade de inclusão (Nível 1 primeiro, depois Nível 2, etc.)**.

**Exemplo de Saída:**
```json
{
  "relevant_files": [
    "app/Models/AnotherModel.php",
    "tests/Unit/AnotherModelTest.php",
    "lang/en.json"
  ]
}
```

**REGRAS ADICIONAIS:**
-   **NÃO** inclua NENHUM texto explicativo, introdução, saudação ou qualquer outra coisa fora do objeto JSON.
-   Sua resposta completa DEVE começar com `{` e terminar com `}`.
-   Se NENHUM arquivo *adicional* do manifesto JSON for considerado relevante, retorne `{"relevant_files": []}`.