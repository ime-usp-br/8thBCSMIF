Sua tarefa é analisar o arquivo `dusk_test_results.txt` fornecido no contexto, identificar os testes Laravel Dusk que falharam, diagnosticar a causa raiz (erro no teste, erro na UI, erro JS, etc.) e gerar **APENAS E SOMENTE APENAS** o código PHP/Blade/JS **COMPLETO e CORRIGIDO** para o(s) arquivo(s) necessário(s) para resolver essas falhas. Considere também que artefatos visuais (screenshots, logs de console) estariam disponíveis nos diretórios `tests/Browser/screenshots` e `tests/Browser/console`.

**Analise TODOS os arquivos de contexto anexados**, com **ÊNFASE** em:
*   `dusk_test_results.txt`: Identifique os testes falhos, mensagens de erro e stack traces.
*   O(s) arquivo(s) de teste Dusk (`tests/Browser/...Test.php`) indicados como falhos.
*   O(s) arquivo(s) de View Blade/Livewire (`resources/views/...blade.php`) que o teste interagia.
*   Arquivos JavaScript (`resources/js/...`) se relevante para o erro.
*   `guia_de_desenvolvimento.md` e `padroes_codigos_boas_praticas.md`: Para padrões.

Siga **OBRIGATORIAMENTE, SEM EXCEÇÕES E COM MÁXIMA FIDELIDADE** estas regras de implementação:

1.  **Foco nas Falhas:** Corrija **APENAS** as falhas listadas em `dusk_test_results.txt`. Não refatore ou adicione testes não relacionados.
2.  **Diagnóstico:** Determine a causa: seletor Dusk inválido? Problema de timing (falta `waitFor`)? Erro de asserção? Bug na UI (HTML/CSS/JS)? Erro no componente Livewire?
3.  **Correção Direcionada:** Gere código corrigido para o arquivo correto (teste Dusk, Blade, Livewire, JS).
4.  **Validade e Tecnologia:** O código corrigido **DEVE** ser PHP/Blade/JS válido.
5.  **Manter Estilo:** As correções **DEVEM** manter o estilo (PSR-12/Pint para PHP/Blade, boas práticas JS) e formatação do arquivo original.
6.  **Impacto Mínimo:** Faça as alterações mínimas necessárias para o teste Dusk passar.
7.  **Seletores Dusk:** Se corrigir o teste, prefira seletores `dusk="..."`.
8.  **PROIBIÇÃO DE REFERÊNCIAS:** **NUNCA** mencione nomes de arquivos de contexto não versionados na saída ou em comentários.
9.  **SAÍDA ESTRITAMENTE FORMATADA:** Sua resposta **DEVE** conter **APENAS E SOMENTE APENAS** a concatenação sequencial do código **COMPLETO e CORRIGIDO** para **CADA ARQUIVO** modificado, no formato **ESTRITO**:

    --- START OF FILE path/relativo/ao/projeto/arquivo_corrigido.php ---
    <?php // Código PHP/Blade completo e corrigido do arquivo... ?>
    --- END OF FILE path/relativo/ao/projeto/arquivo_corrigido.php ---
    --- START OF FILE path/relativo/ao/projeto/arquivo_corrigido.js ---
    // Código JS completo e corrigido...
    --- END OF FILE path/relativo/ao/projeto/arquivo_corrigido.js ---

    *   Use o caminho exato do arquivo original nos marcadores.
    *   Inclua o código **COMPLETO** do arquivo modificado.
    *   **NENHUM** texto extra (introdução, explicação, etc.) fora dos blocos `--- START/END ---`.
    *   Comece diretamente com o primeiro `--- START OF FILE ...`. Termine imediatamente após o último `--- END OF FILE ...`.
10. **SE NENHUMA CORREÇÃO DE CÓDIGO FOR POSSÍVEL/NECESSÁRIA:** Se concluir que os erros são de ambiente, configuração, ou não podem ser corrigidos com o código fornecido, sua resposta **DEVE SER ABSOLUTAMENTE VAZIA** (string vazia).

**OBSERVAÇÃO ADICIONAL PRIORITÁRIA:**
__OBSERVACAO_ADICIONAL__

Execute a tarefa seguindo **TODAS** estas regras com **MÁXIMA FIDELIDADE**.